using Hunter.CSharp.Connector;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestClient
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("generating Logs....");

            /*var messageBus = LogAggregatorService.MessageBus;

            var queue =messageBus.QueueDeclare("applogs");

            messageBus.Consume(queue, (body, properties, info) => Task.Factory.StartNew(() =>
            {
                var message = Encoding.UTF8.GetString(body);
                var log = JsonConvert.DeserializeObject<LogPayload>(message);

                if (log != null)
                {
                    Console.WriteLine($"[{log.LoggingDate.ToString("dd-MM-yy HH:mm")}] AppId:[{log.ApplicationId}] [{log.LogCategorization}] {log.LogMessage}");
                }
            }));*/

            for (int i = 0; i < 100; i++)
            {
                var log = new LogPayload
                {
                    ApplicationId = "Test Client",
                    Category = "",
                    Subcategory = "",
                    LogCategorization = GetLogConstant(i),
                    LoggingDate = DateTime.Now,
                    LogMessage = $"Log message {i} generated by test client"
                };

                Console.WriteLine("Posting log {0}", i);
                LogAggregatorService.PostLog(log);
            }             
          

            Console.WriteLine("Logs posting complete");

            Console.ReadKey();
        }

        private static LogConstants GetLogConstant(int i)
        {
            if (i % 3 == 0)
                return LogConstants.Error;
            else if (i % 5 == 0)
                return LogConstants.Warning;

            return LogConstants.Info;
        }
    }
}
