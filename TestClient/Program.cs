using Hunter.CSharp.Connector;
using Newtonsoft.Json;
using Serilog;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestClient
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("generating Logs....");         

            Settings.ApplicationId = "Test Client";
            Settings.MongoConnectionString = "192.168.43.41";                   

            Log.Logger = new LoggerConfiguration().
                WriteTo.CSharpConnectorSerilogSink()
                .CreateLogger();

            for (int i = 0; i < 100; i++)
            {
                var log = new LogPayload
                {
                    ApplicationId = "Test Client",
                    Category = "",
                    Subcategory = "",
                    LogCategorization = GetLogConstant(i),
                    LoggingDate = DateTime.Now,
                    LogMessage = $"Log message {i} generated by test client"
                };


                /*string logPayloadSerialized = JsonConvert.SerializeObject(log);

                if (log.LogCategorization == LogConstants.Info)
                    Log.Information(logPayloadSerialized);
                else if (log.LogCategorization == LogConstants.Error)
                    Log.Error(logPayloadSerialized);
                else
                    Log.Warning(logPayloadSerialized);*/

                Console.WriteLine($"Posting log {i + 1}");

                var stopWatch = new Stopwatch();
                stopWatch.Start();

                if (log.LogCategorization == LogConstants.Info)
                {
                    Log.Information(JsonConvert.SerializeObject(log));
                }
                else if (log.LogCategorization == LogConstants.Error)
                {
                    Log.Error(JsonConvert.SerializeObject(log));
                }
                else if (log.LogCategorization == LogConstants.Warning)
                {
                    Log.Warning(JsonConvert.SerializeObject(log));
                }

                //LogAggregatorService.PostLog(log);

                stopWatch.Stop();
                Console.WriteLine($"Writing payload  {i+1}, Elapsed Time {stopWatch.ElapsedMilliseconds} ms");
            }         

            Console.WriteLine("Logs posting complete");

            Console.ReadKey();
        }

        private static LogConstants GetLogConstant(int i)
        {
            if (i % 3 == 0)
                return LogConstants.Error;
            else if (i % 5 == 0)
                return LogConstants.Warning;

            return LogConstants.Info;
        }
    }
}
